@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.Services.Data;
@using Chinook.Services.Data.Interfaces;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using System.Text.RegularExpressions;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Inject] IArtistService artistService { get; set; }
    [Inject] ITracksServices tracksServices { get; set; }
    [Inject] IPlayListService playListService { get; set; }
    [Inject] IUserService userService { get; set; }
    @inject NavigationManager navigationManager;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter] public long ArtistId { get; set; }

    private Modal PlaylistDialog { get; set; }
    private long SelectedPlaylistId { get; set; }
    private string NewPlaylistName;
    private ArtistDto Artist;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private List<Playlist> ExistingPlaylists;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);    
        CurrentUserId =  await userService.GetUserId(authenticationState);

        Artist = await artistService.GetClientArtist(ArtistId);
        Tracks = await tracksServices.GetTracks(Artist,CurrentUserId);

        ExistingPlaylists = await playListService.GetExistingPlaylists(CurrentUserId);
    }

    private void ExistingPlaylistChanged(ChangeEventArgs e)
    {
        if (long.TryParse(e.Value.ToString(), out long playlistId))
        {
            SelectedPlaylistId = playlistId;
        }

        else if (e.Value !=null)
        {
            var match = Regex.Match(e.Value.ToString(), @"^([\r\n\s]*Playlist\s)(\d+)");
            if (match.Success)
            {
                SelectedPlaylistId = long.Parse(match.Groups[2].Value);
            }
        }
        else
        {
            SelectedPlaylistId = 0;
        }
    }

    private async Task FavoriteTrack(long trackId)
    {
        await tracksServices.UpdateFavoriteTrackStatus(trackId, CurrentUserId, true);
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        await ReloadPage();
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        await tracksServices.UpdateFavoriteTrackStatus(trackId, CurrentUserId, false);
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
        await ReloadPage();
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        CloseInfoMessage();
        string playListName = string.Empty;
        if (!string.IsNullOrWhiteSpace(NewPlaylistName))
        {         
           // Create a new playlist and add the track to it
            var newPlaylist =await playListService.CreateNewPlaylist(CurrentUserId, NewPlaylistName);
            playListName= await playListService.AddTrackToPlaylist(newPlaylist.PlaylistId, SelectedTrack.TrackId);
        }
        else if (SelectedPlaylistId != 0)
        {
            // Add the track to the selected existing playlist
            playListName= await playListService.AddTrackToPlaylist(SelectedPlaylistId, SelectedTrack.TrackId);
        }
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {playListName}.";
        PlaylistDialog.Close();
        await ReloadPage();
    }

    private async Task ReloadPage()
    {
        await Task.Delay(500);
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }


    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }


}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="ExistingPlaylistChanged">
                <option value="">-- Select an existing playlist --</option>
               @*Keeping these predefined playlist  *@
               @* <option>Playlist 1</option>
                <option>Playlist 2</option>
                <option>Playlist 3</option>*@
                @foreach (var playlist in ExistingPlaylists)
                {
                    <option value="@playlist.PlaylistId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="@NewPlaylistName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
