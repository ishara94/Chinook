@page "/"
@attribute [Authorize]

@using Chinook.ClientModels;
@using Chinook.Services.Data.Interfaces;
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>
<div class="d-flex align-items-center justify-content-between">
    <h1>Artists</h1>
    <input type="text" placeholder="Search artist" @bind="@searchTerm" @oninput="FilterArtists" @onkeydown="HandleKeyDown" />
</div>

@if (FilteredArtists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.NumberOfAlbums</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArtistDto> Artists;
    private List<ArtistDto> FilteredArtists;
    private List<ArtistDto> PreviousFilteredArtists;
    private string searchTerm;
    [Inject] IArtistService artistService { get; set; }
    @inject NavigationManager navigationManager;

    protected override async Task OnInitializedAsync()
    {
        try
        {   // Handle any Exception throw when Initializing
            await HandleExceptionAsync(async () =>
            {
                await InvokeAsync(StateHasChanged);
                Artists = artistService.GetClientArtists();
                FilteredArtists = Artists;
                PreviousFilteredArtists = Artists;               
            });
        }
        catch (Exception)
        {
            // Redirect page back to Error Page
            navigationManager.NavigateTo("/Error", forceLoad: true);
        }     
    }

    private void FilterArtists(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilteredArtists = new SerachServices().ApplyFilter(Artists, a => a.Name, searchTerm);
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Backspace")
        {
            searchTerm = "";
            FilteredArtists = PreviousFilteredArtists;
        }
        else
        {
            PreviousFilteredArtists = FilteredArtists;
        }
    }

    private async Task HandleExceptionAsync(Func<Task> action)
    {
        try
        {
            await action();
        }
        catch (Exception)
        {
            // Redirect to the Error page
            navigationManager.NavigateTo("/Error", forceLoad: true);
        }
    }
}